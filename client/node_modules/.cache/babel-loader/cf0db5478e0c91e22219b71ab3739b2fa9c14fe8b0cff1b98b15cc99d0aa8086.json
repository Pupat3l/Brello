{"ast":null,"code":"var _jsxFileName = \"/Users/pujanpatel/Desktop/GitHub/Brello/Brello/client/src/components/Board/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport Column from \"../Column\";\nimport \"./board.css\";\nimport Add from \"../Add\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  tasks: {},\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: []\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: []\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: []\n    }\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"]\n};\nconst Board = () => {\n  _s();\n  const [data, setData] = useState(initialData);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // If there is no destination or the draggable is dropped back to its original position, do nothing\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    const startColumn = data.columns[source.droppableId];\n\n    // If the draggable is dropped within the same column\n    if (destination.droppableId === source.droppableId) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1); // Remove the dragged task from its original position\n      newTaskIds.splice(destination.index, 0, draggableId); // Insert the dragged task at the new position\n\n      const newColumn = {\n        ...startColumn,\n        taskIds: newTaskIds\n      };\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n      setData(newState);\n    } else {\n      // If the draggable is dropped in a different column\n      const endColumn = data.columns[destination.droppableId];\n\n      // Remove the dragged task from its original column\n      const startTaskIds = Array.from(startColumn.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStartColumn = {\n        ...startColumn,\n        taskIds: startTaskIds\n      };\n\n      // Add the dragged task to the new column\n      const endTaskIds = Array.from(endColumn.taskIds);\n      endTaskIds.splice(destination.index, 0, draggableId);\n      const newEndColumn = {\n        ...endColumn,\n        taskIds: endTaskIds\n      };\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newStartColumn.id]: newStartColumn,\n          [newEndColumn.id]: newEndColumn\n        }\n      };\n      setData(newState);\n    }\n  };\n  const addCard = (columnId, content) => {\n    //create an id for tast aka card\n    const newTaskId = `task-${Object.keys(data.tasks).length + 1}`;\n    const newTasks = {\n      ...data.tasks,\n      [newTaskId]: {\n        id: newTaskId,\n        content\n      }\n    };\n    //add card to column at the end\n    const newColumns = {\n      ...data.columns,\n      [columnId]: {\n        ...data.columns[columnId],\n        taskIds: [...data.columns[columnId].taskIds, newTaskId]\n      }\n    };\n    //updates the data using setData\n    setData({\n      ...data,\n      tasks: newTasks,\n      columns: newColumns\n    });\n  };\n  const addColumn = title => {\n    //create an id for column\n    const newColumnId = `column-${Object.keys(data.columns).length + 1}`;\n    //add column to the column list\n    const newColumns = {\n      ...data.columns,\n      [newColumnId]: {\n        id: newColumnId,\n        title,\n        taskIds: []\n      }\n    };\n    //update the data using setData\n    setData({\n      ...data,\n      columns: {\n        ...newColumns\n      },\n      columnOrder: [...data.columnOrder, newColumnId]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: data.columnOrder.map(columnId => {\n        const column = data.columns[columnId];\n        const tasks = column.taskIds.map(taskId => data.tasks[taskId] || {});\n        return /*#__PURE__*/_jsxDEV(Column, {\n          column: column,\n          tasks: tasks,\n          addCard: addCard\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Add, {\n      buttonText: \"Add Column\",\n      onSubmit: title => addColumn(title)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","DragDropContext","Column","Add","jsxDEV","_jsxDEV","initialData","tasks","columns","id","title","taskIds","columnOrder","Board","_s","data","setData","onDragEnd","result","destination","source","draggableId","droppableId","index","startColumn","newTaskIds","Array","from","splice","newColumn","newState","endColumn","startTaskIds","newStartColumn","endTaskIds","newEndColumn","addCard","columnId","content","newTaskId","Object","keys","length","newTasks","newColumns","addColumn","newColumnId","className","children","map","column","taskId","fileName","_jsxFileName","lineNumber","columnNumber","buttonText","onSubmit","_c","$RefreshReg$"],"sources":["/Users/pujanpatel/Desktop/GitHub/Brello/Brello/client/src/components/Board/Board.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport {DragDropContext} from \"react-beautiful-dnd\";\nimport Column from \"../Column\";\nimport \"./board.css\";\nimport Add from \"../Add\";\n\nconst initialData = {\n  tasks: {},\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"To Do\",\n      taskIds: [],\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"In Progress\",\n      taskIds: [],\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Done\",\n      taskIds: [],\n    },\n  },\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n};\n\nconst Board = () => {\n  const [data, setData] = useState(initialData);\n\n  const onDragEnd = (result) => {\n    const {destination, source, draggableId} = result;\n\n    // If there is no destination or the draggable is dropped back to its original position, do nothing\n    if (\n      !destination ||\n      (destination.droppableId === source.droppableId &&\n        destination.index === source.index)\n    ) {\n      return;\n    }\n\n    const startColumn = data.columns[source.droppableId];\n\n    // If the draggable is dropped within the same column\n    if (destination.droppableId === source.droppableId) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1); // Remove the dragged task from its original position\n      newTaskIds.splice(destination.index, 0, draggableId); // Insert the dragged task at the new position\n\n      const newColumn = {\n        ...startColumn,\n        taskIds: newTaskIds,\n      };\n\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n\n      setData(newState);\n    } else {\n      // If the draggable is dropped in a different column\n      const endColumn = data.columns[destination.droppableId];\n\n      // Remove the dragged task from its original column\n      const startTaskIds = Array.from(startColumn.taskIds);\n      startTaskIds.splice(source.index, 1);\n      const newStartColumn = {\n        ...startColumn,\n        taskIds: startTaskIds,\n      };\n\n      // Add the dragged task to the new column\n      const endTaskIds = Array.from(endColumn.taskIds);\n      endTaskIds.splice(destination.index, 0, draggableId);\n      const newEndColumn = {\n        ...endColumn,\n        taskIds: endTaskIds,\n      };\n\n      const newState = {\n        ...data,\n        columns: {\n          ...data.columns,\n          [newStartColumn.id]: newStartColumn,\n          [newEndColumn.id]: newEndColumn,\n        },\n      };\n\n      setData(newState);\n    }\n  };\n\n  const addCard = (columnId, content) => {\n    //create an id for tast aka card\n    const newTaskId = `task-${Object.keys(data.tasks).length + 1}`;\n    const newTasks = {\n      ...data.tasks,\n      [newTaskId]: {id: newTaskId, content},\n    };\n    //add card to column at the end\n    const newColumns = {\n      ...data.columns,\n      [columnId]: {\n        ...data.columns[columnId],\n        taskIds: [...data.columns[columnId].taskIds, newTaskId],\n      },\n    };\n    //updates the data using setData\n    setData({\n      ...data,\n      tasks: newTasks,\n      columns: newColumns,\n    });\n  };\n\n  const addColumn = (title) => {\n    //create an id for column\n    const newColumnId = `column-${Object.keys(data.columns).length + 1}`;\n    //add column to the column list\n    const newColumns = {\n      ...data.columns,\n      [newColumnId]: {\n        id: newColumnId,\n        title,\n        taskIds: [],\n      },\n    };\n    //update the data using setData\n    setData({\n      ...data,\n      columns: {\n        ...newColumns,\n      },\n      columnOrder: [...data.columnOrder, newColumnId],\n    });\n  };\n\n  return (\n    <div className=\"board-container\">\n      <DragDropContext onDragEnd={onDragEnd}>\n        {data.columnOrder.map((columnId) => {\n          const column = data.columns[columnId];\n          const tasks = column.taskIds.map(\n            (taskId) => data.tasks[taskId] || {}\n          );\n\n          return (\n            <Column\n              key={column.id}\n              column={column}\n              tasks={tasks}\n              addCard={addCard}\n            />\n          );\n        })}\n      </DragDropContext>\n      <Add buttonText=\"Add Column\" onSubmit={(title) => addColumn(title)} />\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}