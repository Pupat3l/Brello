{"ast":null,"code":"var _jsxFileName = \"/Users/pujanpatel/Desktop/GitHub/Brello/Brello/client/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Column from './Column';\nimport \"./board.css\";\nimport Add from './Add';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialData = {\n  tasks: {\n    'task-1': {\n      id: 'task-1',\n      content: 'Task 1'\n    },\n    'task-2': {\n      id: 'task-2',\n      content: 'Task 2'\n    },\n    'task-3': {\n      id: 'task-3',\n      content: 'Task 3'\n    }\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'To Do',\n      taskIds: ['task-1', 'task-2', 'task-3']\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'In Progress',\n      taskIds: []\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Done',\n      taskIds: []\n    }\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3']\n};\nconst Board = () => {\n  _s();\n  const [data, setData] = useState(initialData);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source,\n      draggableId\n    } = result;\n\n    // If there is no destination, or the destination is the same as the source,\n    // or the draggable is dropped back to its original position, do nothing\n    if (!destination || destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n\n    // Remove the dragged task from its original column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds\n    };\n\n    // Add the dragged task to the new column\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const newEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds\n    };\n\n    // Update the state with the new column order and column data\n    const newState = {\n      ...data,\n      columns: {\n        ...data.columns,\n        [newStartColumn.id]: newStartColumn,\n        [newEndColumn.id]: newEndColumn\n      }\n    };\n    setData(newState);\n  };\n  const addCard = (columnId, content) => {\n    //create an id for tast aka card\n    const newTaskId = `task-${Object.keys(data.tasks).length + 1}`;\n    const newTasks = {\n      ...data.tasks,\n      [newTaskId]: {\n        id: newTaskId,\n        content\n      }\n    };\n    //add card to column at the end\n    const newColumns = {\n      ...data.columns,\n      [columnId]: {\n        ...data.columns[columnId],\n        taskIds: [...data.columns[columnId].taskIds, newTaskId]\n      }\n    };\n    //updates the data using setData\n    setData({\n      ...data,\n      tasks: newTasks,\n      columns: newColumns\n    });\n  };\n  const addColumn = title => {\n    //create an id for column\n    const newColumnId = `column-${Object.keys(data.columns).length + 1}`;\n    //add column to the column list\n    const newColumns = {\n      ...data.columns,\n      [newColumnId]: {\n        id: newColumnId,\n        title,\n        taskIds: []\n      }\n    };\n    //update the data using setData\n    setData({\n      ...data,\n      columns: {\n        ...newColumns\n      },\n      columnOrder: [...data.columnOrder, newColumnId]\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-col\",\n    children: [/*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: data.columnOrder.map(columnId => {\n        const column = data.columns[columnId];\n        const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n        return /*#__PURE__*/_jsxDEV(Column, {\n          column: column,\n          tasks: tasks,\n          addCard: addCard\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Add, {\n      buttonText: \"Add Column\",\n      onSubmit: title => addColumn(title)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"hDGcfQHkZj5ZsEBk8saO8jx9VfY=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","DragDropContext","Column","Add","jsxDEV","_jsxDEV","initialData","tasks","id","content","columns","title","taskIds","columnOrder","Board","_s","data","setData","onDragEnd","result","destination","source","draggableId","droppableId","index","startColumn","endColumn","startTaskIds","Array","from","splice","newStartColumn","endTaskIds","newEndColumn","newState","addCard","columnId","newTaskId","Object","keys","length","newTasks","newColumns","addColumn","newColumnId","className","children","map","column","taskId","fileName","_jsxFileName","lineNumber","columnNumber","buttonText","onSubmit","_c","$RefreshReg$"],"sources":["/Users/pujanpatel/Desktop/GitHub/Brello/Brello/client/src/components/Board.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport Column from './Column';\nimport \"./board.css\";\nimport Add from './Add';\n\nconst initialData = {\n  tasks: {\n    'task-1': { id: 'task-1', content: 'Task 1' },\n    'task-2': { id: 'task-2', content: 'Task 2' },\n    'task-3': { id: 'task-3', content: 'Task 3' },\n  },\n  columns: {\n    'column-1': {\n      id: 'column-1',\n      title: 'To Do',\n      taskIds: ['task-1', 'task-2', 'task-3'],\n    },\n    'column-2': {\n      id: 'column-2',\n      title: 'In Progress',\n      taskIds: [],\n    },\n    'column-3': {\n      id: 'column-3',\n      title: 'Done',\n      taskIds: [],\n    },\n  },\n  columnOrder: ['column-1', 'column-2', 'column-3'],\n};\n\nconst Board = () => {\n  const [data, setData] = useState(initialData);\n  const onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n  \n    // If there is no destination, or the destination is the same as the source,\n    // or the draggable is dropped back to its original position, do nothing\n    if (!destination || (destination.droppableId === source.droppableId && destination.index === source.index)) {\n      return;\n    }\n  \n    const startColumn = data.columns[source.droppableId];\n    const endColumn = data.columns[destination.droppableId];\n  \n    // Remove the dragged task from its original column\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStartColumn = {\n      ...startColumn,\n      taskIds: startTaskIds,\n    };\n  \n    // Add the dragged task to the new column\n    const endTaskIds = Array.from(endColumn.taskIds);\n    endTaskIds.splice(destination.index, 0, draggableId);\n    const newEndColumn = {\n      ...endColumn,\n      taskIds: endTaskIds,\n    };\n  \n    // Update the state with the new column order and column data\n    const newState = {\n      ...data,\n      columns: {\n        ...data.columns,\n        [newStartColumn.id]: newStartColumn,\n        [newEndColumn.id]: newEndColumn,\n      },\n    };\n  \n    setData(newState);\n  };\n  \n\n  const addCard = (columnId, content) => {\n    //create an id for tast aka card\n    const newTaskId = `task-${Object.keys(data.tasks).length + 1}`;\n    const newTasks = {\n      ...data.tasks,\n      [newTaskId]: { id: newTaskId, content },\n    };\n    //add card to column at the end\n    const newColumns = {\n      ...data.columns,\n      [columnId]: {\n        ...data.columns[columnId],\n        taskIds: [...data.columns[columnId].taskIds, newTaskId],\n      },\n    };\n    //updates the data using setData\n    setData({\n      ...data,\n      tasks: newTasks,\n      columns: newColumns,\n    });\n  };\n\n  const addColumn = (title) => {\n    //create an id for column\n    const newColumnId = `column-${Object.keys(data.columns).length + 1}`;\n    //add column to the column list\n    const newColumns = {\n      ...data.columns,\n      [newColumnId]: {\n        id: newColumnId,\n        title,\n        taskIds: [],\n      },\n    };\n    //update the data using setData\n    setData({\n      ...data,\n      columns: {\n        ...newColumns,\n      },\n      columnOrder: [...data.columnOrder, newColumnId],\n    });\n  };\n\n  return (\n    <div className='board-col'>\n      <DragDropContext onDragEnd={onDragEnd}>\n        {data.columnOrder.map((columnId) => {\n          const column = data.columns[columnId];\n          const tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\n\n          return <Column key={column.id} column={column} tasks={tasks} addCard={addCard}/>;\n        })}\n      </DragDropContext>\n      <Add\n        buttonText=\"Add Column\"\n        onSubmit={(title) => addColumn(title)}\n      />\n\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}